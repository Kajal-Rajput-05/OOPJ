1) Explain the components of the JDK.
Ans : Java Compiler (javac): This is the tool used to compile Java source code files (.java) into bytecode files (.class).
Java Runtime Environment (JRE): The JRE contains the JVM and other libraries necessary to run Java applications.
Java Development Kit (JDK): It includes the JRE and additional tools like javac, java, javap, etc., necessary for Java development.

2) Differentiate between JDK, JVM, and JRE.
Ans : JDK (Java Development Kit): JDK is a software development kit that includes tools for developing, debugging, and monitoring Java applications. It contains the JRE along with development tools like javac.
JRE (Java Runtime Environment): JRE is an environment that provides the runtime support for executing Java applications. It includes the JVM and libraries necessary for running Java programs.
JVM (Java Virtual Machine): JVM is an abstract computing machine that enables a computer to run Java bytecode. It is responsible for interpreting or compiling bytecode into native machine code and executing it.

3) What is the role of the JVM in Java? & How does the JVM execute Java code?
Ans : Role of JVM: JVM is the heart of the Java platform. Its primary role is to execute Java bytecode, providing an abstraction layer between Java programs and the underlying hardware and operating system.
Execution Process: JVM loads the bytecode generated by the Java compiler, verifies its security, and then executes it. It uses various runtime memory areas for execution, including method area, heap, stack, PC register, and native method stacks.

4) Explain the memory management system of the JVM.
Ans : Heap Memory: Used for dynamic memory allocation of Java objects.
Stack Memory: Used for method execution, storing local variables, and partial results.
Method Area (PermGen/Metaspace): Stores class metadata, constant pool, and method information.
Program Counter (PC) Register: Holds the address of the currently executing JVM instruction.
Native Method Stacks: Used for native method execution.

5) What are the JIT compiler and its role in the JVM? What is the bytecode and why is 
it important for Java?
Ans : JIT Compiler (Just-In-Time Compiler): JIT compiles bytecode into native machine code at runtime for improved performance. It identifies frequently executed code and optimizes it.
Bytecode: Bytecode is the intermediate representation of Java source code, which is platform-independent and executed by the JVM. It ensures portability and security.

6) Describe the architecture of the JVM.
What is JVM Architecture?
Ans : The JVM (Java Virtual Machine) architecture consists of several components that work together to execute Java programs. Here is a high-level overview of the JVM architecture:

-Class Loader: The Class Loader component is responsible for loading Java class files into the JVM at runtime. It performs tasks such as locating and reading class files, verifying their bytecode, and defining the classes within the JVM.
-Runtime Data Area: The Runtime Data Area is the memory area where the JVM manages data during program execution. It consists of several components:
-Method Area: The Method Area stores class-level data, including the bytecode of methods, constant pool, static variables, and method metadata.
-Heap: The Heap is the runtime data area where objects are allocated. It is divided into two parts: Young Generation and Old Generation. The Young Generation is further divided into Eden Space, Survivor Space, and other survivor spaces, while the Old Generation holds long-lived objects.
Java Stack: Each thread in the JVM has a Java Stack that stores method-specific data, including local variables, method arguments, and method invocation records. It also manages method calls and returns.
-Native Method Stack: The Native Method Stack holds native method-specific data, similar to the Java Stack. It is used for executing native (non-Java) methods.
-Program Counter: The Program Counter (PC) keeps track of the currently executing bytecode instruction.
-Execution Engine: The Execution Engine executes Java bytecode. It can employ different techniques for bytecode execution, such as interpretation, Just-In-Time (JIT) compilation, or a combination of both. The execution engine interacts with the Runtime Data Area and coordinates the execution of Java programs.
-Native Method Interface (JNI): The JNI allows Java programs to interact with native code written in languages like C or C++. It provides a mechanism for Java code to call native methods and access native libraries.
-JVM Languages: The JVM architecture supports languages other than Java through additional compilers and runtime support. Examples include Kotlin, Scala, and Groovy, which can all be compiled into bytecode and executed on the JVM.

7) How does Java achieve platform independence through the JVM?
Ans : Java is platform-independent because it is compiled to a bytecode that can be run on any device that has a Java Virtual Machine (JVM). This means that you can write a Java program on one platform (such as Windows) and then run it on a different platform (such as macOS or Linux) without making any changes to the code. The JVM acts as an interpreter for the Java bytecode, translating it into instructions that the host machine can understand and execute. This means that the same Java program can run on any device that has a JVM, making it a truly “write once, run anywhere” language.

8) What is the significance of the class loader in Java? What is the process of garbage collection in Java.
Ans : Class Loader: Class Loader loads classes into the JVM dynamically as they are referenced. It enables dynamic loading of classes, which is essential for features like reflection and remote method invocation.
Garbage Collection: Garbage Collection in Java automatically reclaims memory occupied by objects that are no longer in use, preventing memory leaks and reducing the risk of manual memory management errors. It enhances the robustness and stability of Java applications.
